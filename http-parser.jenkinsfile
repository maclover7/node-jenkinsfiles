import groovy.json.JsonOutput

pipeline {
    agent any

    parameters {
        booleanParam(name: 'CERTIFY_SAFE', defaultValue: false, description: 'I have reviewed *the latest version of* these changes and I am sure that they donâ€™t contain any code that could compromise the security of the CI infrastructure.')
        string(defaultValue: "", description: 'The numeric ID of the pull request (from GitHub URL)', name: 'PR_ID')
    }

    stages {
        stage('Clone repository') {
            steps {
                git 'https://github.com/nodejs/http-parser.git'
            }
        }

        stage('Setup Git repository') {
            when {
                expression {
                    return !!env.PR_ID
                }
            }

            steps {
                sh "git fetch origin pull/${env.PR_ID}/head:totest"
                sh 'git checkout totest'
            }
        }

        stage('Setup build dependencies') {
            steps {
                echo "Testing: ${sh(returnStdout: true, script: 'git log -1 --oneline').trim()}"

                sh 'gcc --version'
                sendBuildStatus("pending", env.PR_ID, env.BUILD_URL)
            }
        }

        stage('Run tests') {
            steps {
                sh 'make'
            }
        }
    }

    post {
        success {
            sendBuildStatus("success", env.PR_ID, env.BUILD_URL)
        }

        failure {
            sendBuildStatus("failure", env.PR_ID, env.BUILD_URL)
        }
    }
}

def sendBuildStatus(status, prId, buildUrl) {
    if (!prId) { return }

    def path = ""
    def message = ""

    if (status == "success") {
        message = "tests passed"
        path = "end"
    } else if (status == "failure") {
        message = "tests failed"
        path = "end"
    } else if (status == "pending") {
        message = "checking for errors"
        path = "start"
    }

    def buildPayload = JsonOutput.toJson([
        'identifier': 'test',
        'status': status,
        'message': message,
        'commit': sh(returnStdout: true, script: 'git rev-parse HEAD').trim(),
        'url': buildUrl,
        'ref': "refs/pull/${env.PR_ID}/head"
        ])

    sh(returnStdout: true, script: "curl -H 'Content-Type: application/json' -X POST -d '${buildPayload}' http://9d7d96c6.ngrok.io/http-parser/jenkins/${path}")
}
